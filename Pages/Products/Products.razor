@page "/products"
@inject ILogger<Products> logger
@inject IConfiguration config
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject IProductService productService

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark" @onclick='(() => navigationManager.NavigateTo("/products/add"))'>Add product</button>

@if(products?.Count > 0)
{
    <div class="products-container">
        @foreach(var product in products)
        {
            <div class="card">
                <img src="@product.Images[0]" alt="@product.Title" class="card-img-top" />
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>There's not products to show</p>
}

@code
{
    private List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation(config.GetValue<string>("ApiUrl"));
        await GetProductsAsync();
    }

    private async Task GetProductsAsync()
    {
        products = await productService.GetAllAsync();
    }

    private async Task DeleteProduct(Product product)
    {
        if(!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}" ))
            return;

        await productService.DeleteAsync(product.Id);

        toastService.ShowSuccess("Producto eliminado", "Producto eliminado");

        await GetProductsAsync();
    }
}
